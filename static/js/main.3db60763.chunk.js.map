{"version":3,"sources":["components/buttonsInHeader.jsx","components/grid.jsx","components/leaderBoard.jsx","components/message.jsx","App.js","store/Store.js","index.js"],"names":["Option","Select","moment","require","Header","inject","observer","props","createGrid","size","temp","i","j","classColor","id","randomSort","tempArr","Store","grid","arr","concat","length","Math","floor","random","handleChange","value","clearInterval","intervalGame","setChoosenModeGame","modeGames","setIsPlay","setPlayerWinner","setCount","setGameScore","computer","player","countForWin","setGrid","field","handleChangeName","name","setPlayerName","target","gameEnd","winner","sendWinningPlayer","date","format","getWinners","checkerCell","count","state","score","JSON","parse","stringify","gameScore","split","playerName","iPrew","jPrew","handlePlayGame","isPlay","Object","entries","choosenModeGame","message","error","GameScore","setInterval","delay","setState","firstGames","className","this","gameSettings","style","width","onChange","defaultValue","map","item","key","placeholder","type","onClick","React","Component","Grid","keys","row","index","justufy","cell","handleClickToCell","gridStyle","textAlign","LeaderBord","useEffect","leaderBoards","title","slice","reverse","Title","Typography","Message","marginTop","playerWinner","App","url","fetch","method","then","res","json","data","headers","body","catch","console","decorate","observable","action","setModeGames","store","getGameSetings","stores","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3db60763.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Select, Button, Input, message } from 'antd';\r\nimport '../styles/Header.css'\r\nconst { Option } = Select;\r\nlet moment = require('moment');\r\n\r\nconst Header = inject('Store')(observer(\r\n    class Header extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = { firstGames: false, arr: [] };\r\n            this.intervalGame = null;\r\n        }\r\n        createGrid = (size) => {\r\n            let temp = [];\r\n            for (let i = 0; i < +size; i++) {\r\n                temp[i] = [];\r\n                for (let j = 0; j < +size; j++) {\r\n                    temp[i][j] = {\r\n                        classColor: '',\r\n                        id: `${i}/${j}`\r\n                    }\r\n                }\r\n            }\r\n            return temp;\r\n        }\r\n        randomSort = () => {\r\n            let tempArr = [...this.props.Store.grid];\r\n            let arr = [].concat(...tempArr);\r\n            let j;\r\n            for (let i = arr.length - 1; i > 0; i--) {\r\n                j = Math.floor(Math.random() * (i + 1));\r\n                [arr[j], arr[i]] = [arr[i], arr[j]];\r\n            }\r\n            return arr;\r\n        }\r\n        handleChange = (value) => {\r\n            clearInterval(this.intervalGame);\r\n            this.props.Store.setChoosenModeGame(this.props.Store.modeGames[value]);\r\n            this.props.Store.setIsPlay(false);\r\n            this.props.Store.setPlayerWinner('');\r\n            this.props.Store.setCount(0);\r\n            this.props.Store.setGameScore({ computer: 0, player: 0, countForWin: 0 })\r\n            this.props.Store.setGrid(this.createGrid(this.props.Store.modeGames[value].field));\r\n        }\r\n        handleChangeName = (name) => {\r\n            this.props.Store.setPlayerName(name.target.value);\r\n        }\r\n        gameEnd = (winner) => {// добавить отправку результатов на сервер\r\n            clearInterval(this.intervalGame)\r\n            this.props.Store.setIsPlay(false);\r\n            this.props.Store.setGameScore({ player: 0, computer: 0, countForWin: 0 });\r\n            this.props.Store.setCount(0);\r\n            this.props.Store.setPlayerWinner(winner);\r\n            this.props.Store.sendWinningPlayer({\r\n                winner,\r\n                date: moment().format('H:mm; DD MMMM YYYY')\r\n            })\r\n            this.props.Store.getWinners();\r\n        }\r\n        checkerCell = () => {\r\n            let count = this.props.Store.count; //номер ячейки для проверки\r\n            let grid = [...this.props.Store.grid];\r\n            let arr = [...this.state.arr];\r\n            let score = JSON.parse(JSON.stringify(this.props.Store.gameScore));\r\n            if (count === 0) {//если первый элемент, то просто красим в синий цвет\r\n                let [i, j] = arr[count].id.split('/');\r\n                grid[i][j].classColor = 'blue-cell';\r\n                count = count + 1;\r\n            } else if (count === arr.length) {//если последний элемент, то только проверяем прыдыдущий\r\n                let [i, j] = arr[count - 1].id.split('/');\r\n                if (grid[i][j].classColor === 'blue-cell') {// если предыдущая была синая, добавляем очко комппьютеру\r\n                    grid[i][j].classColor = 'red-cell';\r\n                    score.computer = score.computer + 1\r\n                } else {//иначе мы добавяем очко игроку\r\n                    score.player = score.player + 1\r\n                }\r\n                if (score.player === score.countForWin) {\r\n                    //game win player\r\n                    this.gameEnd(this.props.Store.playerName);\r\n                    return null;\r\n                } else if (score.computer === score.countForWin) {\r\n                    this.gameEnd('Computer');\r\n                    return null;\r\n                }\r\n            } else {// если не перый и не послдений, то проверяем предыдущий и красим в синий текущий\r\n                let [iPrew, jPrew] = arr[count - 1].id.split('/');\r\n                let [i, j] = arr[count].id.split('/');\r\n                if (grid[iPrew][jPrew].classColor === 'blue-cell') {// если предыдущая была синая, добавляем очко комппьютеру\r\n                    grid[iPrew][jPrew].classColor = 'red-cell';\r\n                    score.computer = score.computer + 1\r\n                } else {//иначе мы добавяем очко игроку\r\n                    score.player = score.player + 1\r\n                }\r\n                if (score.player === score.countForWin) {\r\n                    this.gameEnd(this.props.Store.playerName);\r\n                    return null;\r\n                } else if (score.computer === score.countForWin) {\r\n                    this.gameEnd('Computer');\r\n                    return null;\r\n                } else {\r\n                    grid[i][j].classColor = 'blue-cell';\r\n                    count = count + 1;\r\n                }\r\n\r\n            }\r\n            this.props.Store.setCount(count);\r\n            this.props.Store.setGrid(grid);\r\n            this.props.Store.setGameScore(score);\r\n        }\r\n        handlePlayGame = () => {\r\n            if (!this.props.Store.isPlay && Object.entries(this.props.Store.choosenModeGame).length) {\r\n                if (this.props.Store.playerName === '') {\r\n                    message.error('enter your name!')\r\n                } else {\r\n                    clearInterval(this.intervalGame);\r\n                    this.props.Store.setPlayerWinner('');\r\n                    let GameScore = this.props.Store.gameScore;\r\n                    let field = this.props.Store.choosenModeGame.field;\r\n                    this.props.Store.setGrid(this.createGrid(field))\r\n                    GameScore.countForWin = Math.floor((field * field) / 2) + 1;\r\n                    this.props.Store.setGameScore(GameScore);\r\n                    this.props.Store.setIsPlay(true);\r\n                    this.intervalGame = setInterval(this.checkerCell, this.props.Store.choosenModeGame.delay);\r\n                    this.setState({\r\n                        firstGames: true,\r\n                        arr: this.randomSort()\r\n                    })\r\n                }\r\n            } else {\r\n                message.error('pick game mode or game is plaing')\r\n            }\r\n        }\r\n        render() {\r\n            return (\r\n                <div className='header-container'>\r\n                    {this.props.Store.gameSettings.length ?\r\n                        <div className='pick-game-mod-select'>\r\n                            <Select style={{ width: 200 }} onChange={this.handleChange} defaultValue=\"Pick game mode\">\r\n                                {this.props.Store.gameSettings.map(item => {\r\n                                    return <Option key={item[0]} value={item[0]}>{item[0]}</Option>\r\n                                })}\r\n                            </Select>\r\n                        </div> : <div> load... </div>\r\n                    }\r\n\r\n                    <div className='enter-name-input'>\r\n                        <Input placeholder='Enter your name' onChange={this.handleChangeName} />\r\n                    </div>\r\n                    <div className='play-button'>\r\n                        <Button type='primary' onClick={this.handlePlayGame}>{\r\n                            (this.state.firstGames && !this.props.Store.isPlay) ? 'PLAY AGAIN' : 'PLAY'\r\n                        }</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n));\r\nexport default Header","import React, { useEffect, useState } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Col, Row } from 'antd'\r\nimport '../styles/Grid.css';\r\n\r\nconst Grid = inject('Store')(observer((props) => {\r\n    let handleClickToCell = (i, j) => {\r\n        if (props.Store.isPlay) {\r\n            let arr = props.Store.grid;\r\n            if (arr[i][j].classColor === 'blue-cell') {\r\n                arr[i][j].classColor = 'green-cell';\r\n                props.Store.setGrid(arr);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className='grid-container'>\r\n            {(Object.keys(props.Store.grid).length) ?\r\n                <div className='grid-div'>{props.Store.grid.map((row, index) => {\r\n                    return <Row type='flex' justufy='center' key={index}>\r\n                        {row.map((cell, j) => {\r\n                            return <Col key={j} className={`cell-in-row ${cell.classColor}`} onClick={() => handleClickToCell(index, j)} />\r\n                        })}\r\n                    </Row>\r\n                })}</div>\r\n                : <div>Please pick game mode</div>}\r\n        </div >\r\n    );\r\n}))\r\nexport default Grid","import React , { useEffect}from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Card } from 'antd';\r\nimport '../styles/LeaderBoard.css'\r\nconst gridStyle = {\r\n    width: '100%',\r\n    textAlign: 'center',\r\n};\r\nconst LeaderBord = inject('Store')(observer((props) => {\r\n    useEffect(() => {\r\n        props.Store.getWinners();\r\n    }, [props.Store.leaderBoards])\r\n    return (\r\n        <div className='leader-board-container'>\r\n            <Card title=\"Leader board\" >\r\n                {props.Store.leaderBoards.length === 0?\r\n                    <Card.Grid style={gridStyle}> NO DATA </Card.Grid>\r\n                    :\r\n                    props.Store.leaderBoards.slice().reverse().map((item,index) => {\r\n                        return <Card.Grid key = {index} style={gridStyle}>{`${item.winner} - ${item.date}`}</Card.Grid>\r\n                    })\r\n                }\r\n            </Card>\r\n        </div>\r\n    );\r\n}))\r\nexport default LeaderBord;","import React from 'react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { Typography } from 'antd';\r\nconst { Title } = Typography;\r\n\r\nconst Message = inject('Store')(observer((props) => {\r\n    return (\r\n        <div style={{textAlign: 'center', marginTop: '1rem'}}>\r\n            {props.Store.playerWinner === '' ? '' : <Title>{`${props.Store.playerWinner} won`}</Title>}\r\n        </div>\r\n    );\r\n}))\r\nexport default Message;","import React from 'react'\r\n\r\nimport Header from './components/buttonsInHeader';\r\nimport Grid from './components/grid';\r\nimport './styles/App.css';\r\nimport LeaderBoard from './components/leaderBoard';\r\nimport { Typography } from 'antd';\r\nimport Message from './components/message';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst App = (props) => {\r\n    return (\r\n        <div className='main-container'>\r\n            <div className='mainTitle'><Title>Game In Dots</Title></div>\r\n            <div className='container-content'>\r\n                <div>\r\n                    <Header />\r\n                    <Message />\r\n                    <Grid />\r\n                </div>\r\n                <LeaderBoard />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default App","import { observable, action, decorate } from 'mobx';\r\n\r\nclass Store {\r\n    modeGames = {};\r\n    choosenModeGame = {};\r\n    isPlay = false;\r\n    playerName = '';\r\n    url = 'http://starnavi-frontend-test-task.herokuapp.com/';\r\n    gameSettings = [];\r\n    grid = [];\r\n    count = 0;\r\n    gameScore = {\r\n        player: 0,\r\n        computer: 0,\r\n        countForWin: 0,\r\n    }\r\n    playerWinner = '';\r\n    setPlayerWinner (props) {\r\n        this.playerWinner = props;\r\n    }\r\n    leaderBoards = [];\r\n    setGameScore(props){\r\n        this.gameScore = JSON.parse(JSON.stringify(props));\r\n    }\r\n    setCount (props) {\r\n        this.count = props;\r\n    }\r\n    setModeGames(props) {\r\n        this.modeGames = JSON.parse(JSON.stringify(props));\r\n    }\r\n    setIsPlay(props) {\r\n        this.isPlay = props;\r\n    }\r\n    setPlayerName(props) {\r\n        this.playerName = props;\r\n    }\r\n    setChoosenModeGame(props) {\r\n        this.choosenModeGame = JSON.parse(JSON.stringify(props));\r\n    }\r\n    setGrid(props){\r\n        this.grid = [...props];\r\n    }\r\n    async getGameSetings() {\r\n        return fetch(`${this.url}game-settings`, {\r\n            method: 'GET'\r\n        }).then(res => res.json())\r\n            .then(res => {\r\n                this.gameSettings = Object.entries(res);\r\n                this.modeGames = res;\r\n            })\r\n    }\r\n    async getWinners() {\r\n        return fetch(`${this.url}winners`, {\r\n            method: 'GET'\r\n        }).then(res => res.json()).then(res => this.leaderBoards = [...res])\r\n    }\r\n    async sendWinningPlayer(data) {\r\n        fetch(`${this.url}winners`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then(res => res.json())\r\n            .catch(error => console.error('Ошибка:', error));\r\n    }\r\n    \r\n\r\n}\r\ndecorate(Store, {\r\n    leaderBoards: observable,\r\n    modeGames: observable,\r\n    isPlay: observable,\r\n    playerName: observable,\r\n    gameSettings: observable,\r\n    choosenModeGame: observable,\r\n    grid: observable,\r\n    count: observable, \r\n    gameScore: observable,\r\n    playerWinner: observable,\r\n\r\n    setPlayerWinner: action,\r\n    setGameScore: action,\r\n    setCount: action,\r\n    setIsPlay: action,\r\n    setModeGames: action,\r\n    setPlayerName: action,\r\n    setChoosenModeGame: action,\r\n    setGrid: action\r\n});\r\n\r\nconst store = new Store();\r\nstore.getGameSetings()\r\nexport default store;\r\nexport { Store };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'mobx-react';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport Store from './store/Store';\r\n\r\nconst stores = { Store };\r\n\r\nReactDOM.render(\r\n    <Provider {...stores} >\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}